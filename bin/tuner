#!/usr/bin/env node

var program = require('commander');
var logger = require('../lib/logger');
var Tuner = require('../lib/tuner');
var util = require('../lib/util');
var clc = require('cli-color');
var moment = require('moment');

program
    .version(Tuner.version)
    .usage('[options] <command>...')
    .option('-d, --debug', 'Enables debug mode')
    .option('-D, --dry-run', 'Runs without actually doing anything, i.e. no processing, deletion of files, etc.');

program
    .command('convert [dir]')
    .description('Processes the files in the specified directory')
    .action(
        function(dir) {
            if (program.dryRun) { logger.warn('Running in Dry Run mode'); }
            dir = dir || process.cwd();
            logger.info("Processing the directory '%s'", dir);
            var tuner = new Tuner({debug: program.debug, verbose: program.verbose, dryRun: program.dryRun});

            // track events
            tuner.on('preparingTrack', function(track) {
                logger.ok('Processing the track %s', track.filename);
            });
            
            tuner.on('trackConverted', function(f) {
                console.log("     Track converted");
            });

            tuner.on('artworkEmbedded', function(f) {
                console.log("     Artwork embedded");
            });

            tuner.on('trackProcessed', function(f) {
                console.log(clc.green("     done"));
            });

            // global events
            tuner.on('preparingDirectory', function(directory) {
                console.log('     Preparing');
            });

            tuner.on('processingComplete', function(stats) {
                console.log();
                console.log(util.lpad('', '-', 72));
                console.log('SUMMARY:')
                console.log(util.lpad('', '-', 72));
                console.log(clc.green('Total Files: ') + '%s', stats.totalFiles);
                console.log(clc.green('Total time: ') + '%s', moment(stats.totalTime).format('HH:mm:ss'));
                console.log(clc.green('Finished at: ') + '%s', moment(stats.endDate).format('dddd DD MMMM YYYY HH:mm:ss'));
                console.log(util.lpad('', '-', 72));
                console.log();
            });
            
            tuner.on('error', function(err, f) {
                logger.error("There was a problem processing the file '%s'", f);
                process.exit(1);
            });

            tuner.processDirectory(dir);
        }
    );

program
    .command('clean [dir]')
    .description('Removes the flac files from the specified directory')
    .action(
        function(dir) {
            if (program.dryRun) { logger.warn('Running in Dry Run mode'); }
            dir = dir || process.cwd();
            var tuner = new Tuner({verbose: program.verbose, debug: program.debug, dryRun: program.dryRun});
            tuner.on('fileRemoved', function(file) {
                logger.ok("The track '%s' has been removed", file);
            });
            tuner.on('cleanDirectoryError', function(err) {
                logger.error('The directory has not been processed yet; Please run convert first.')
                process.exit(1);
            });
            tuner.cleanDirectory(dir);
        }
    );

program
    .command('add [dir]')
    .description('Adds the m4a files form the specified directory to iTunes')
    .action(
        function(dir) {
            dir = dir || process.cwd();
            var tuner = new Tuner({verbose: program.verbose, debug: program.debug, dryRun: program.dryRun});
            tuner.on('fileAdded', function(file) {
                logger.ok("The track '%s' has been added", file);
            });
            tuner.addToItunes(dir);
        }
    );

program
    .command('process [dir]')
    .description('Processes the specified directory. Process is: convert, clean and add.')
    .action(
        function(dir) {
            dir = dir || process.cwd();
            var tuner = new Tuner({verbose: program.verbose, debug: program.debug, dryRun: program.dryRun});
        }
    );

program.parse(process.argv);
